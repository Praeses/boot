#!/bin/bash

set -u
mkdir -p $PWD/tmp/pids
PID_FILE="$PWD/tmp/pids/$ME.pid"
PORT=${PORT:=''}
PUBLIC_PORT=${PUBLIC_PORT:=''}
OPTIONS=${OPTIONS:='-d'}

function setNetorkVars {
  IP=$(docker inspect $PID | awk /IPAddress/'{print $2}' | grep -Eo '([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})')
  if [[ -n $PORT ]]
  then
    PUBLIC_PORT=$(docker port $PID $PORT)
  fi
}

function run_interactive {
  OPTIONS="-i -t"
  run
}

function run {
  echo "Running command..."
  tmpFile=$(mktemp docker.pid.XXXXXXX)
  rm $tmpFile # just need randomness

  if [ -e $PWD/tmp/pids/docker.pid.* ]
  then
    rm $PWD/tmp/pids/docker.pid.* # Docker won't run if this file exists
  fi

  cmd="docker run -cidfile $PWD/tmp/pids/$tmpFile  $OPTIONS $LIMITS $DNS $VOLUMNS $CONTAINER $START_COMMAND"

  tput smul
  echo ''
  echo $cmd
  echo ''
  tput rmul

  eval $cmd
  PID=$(cat $PWD/tmp/pids/$tmpFile)
  rm $PWD/tmp/pids/$tmpFile # Docker won't run if this file exists
}

PID=$(cat $PID_FILE)
RUNNING=''
if [[ -n $PID ]]
then
  for x in $PID
  do
    RUNNING=$(docker ps -q | grep $x)
  done
fi

DNS_IP=$(cat /etc/resolv.conf | awk /192/'{print $2}' | head -1)
DNS="-dns $DNS_IP"

if [[ -n $RUNNING ]]
then
  setNetorkVars
fi

INSTANCES=${INSTANCES:=1}
VOLUMNS=${VOLUMNS:=''}
GB=${GB:=0}

if [ $GB -ne 0 ]
then
  MB=$(echo "$GB * 1024" | bc)
  mem="$GB Gib"
else
  MB=${MB:=512}
  mem="$MB Meg"
fi



B=$(echo "$MB * 1024 * 1024" | bc)
LIMITS="-m $B"

case "$1" in
  start)
    tput setf 2
    if [[ -z $RUNNING ]]
    then
      tput setf 2
      echo "Starting $INSTANCES instances of $APP"
      for instance in $(seq 1 $INSTANCES)
      do
        echo "Starting $APP.$instance @ $mem"
        run
        echo "PID IS $PID"
        echo $PID >> $PID_FILE
        setNetorkVars
        echo "Running on $IP:$PUBLIC_PORT"
      done

    else
      echo "Starting $APP is already running @ $mem"
    fi
  ;;

  stop)
    if [[ -n $PID ]]
    then
      tput setf 4
      echo "Stopping $APP"
      docker stop $PID
      echo '' > $PID_FILE
      echo "$APP stopped"
    fi
  ;;

  restart)
    tput setf 6
    echo "Restarting $APP"
    $PWD/boot/$ME stop
    $PWD/boot/$ME start
  ;;

  logs)
    for x in $PID
    do
      docker logs $x
    done
  ;;

  attach)
    for x in $PID
    do
      docker attach $x
      break
    done
  ;;

  status)
    for x in $PID
    do
      docker ps | grep $x
    done
  ;;

  top)
    for x in $PID
    do
      docker top $x
    done
  ;;

  ip)
    for x in $PID
    do
      docker inspect $x | awk /IPAddress/'{print $2}' | grep -Eo '([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})'
    done
  ;;

  port)
    if [[ -n $PORT ]]
    then
      for x in $PID
      do
        docker port $x $PORT
      done
    fi
  ;;

  bash)
    START_COMMAND="/bin/bash"
    run_interactive
  ;;
esac
